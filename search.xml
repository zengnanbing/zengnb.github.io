<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github-Pages-Hexo搭建博客</title>
    <url>/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><h4 id="GitHub-Pages是什么？"><a href="#GitHub-Pages是什么？" class="headerlink" title="GitHub Pages是什么？"></a>GitHub Pages是什么？</h4><p>GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<h4 id="接下来应该怎么做？"><a href="#接下来应该怎么做？" class="headerlink" title="接下来应该怎么做？"></a>接下来应该怎么做？</h4><p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github。我们要使用Github Pages + Hexo搭建博客站点，就必须注册Github账号，安装git、node.js以及hexo等，接下来就一起来实践吧！</p>
<h4 id="Github注册与配置"><a href="#Github注册与配置" class="headerlink" title="Github注册与配置"></a>Github注册与配置</h4><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>如果你还没有自己的Github账号，那请到Github官网注册账号：<a href="https://github.com/">https://github.com/</a></p>
<p>注册成功后github会发送验证邮件到你的邮箱，请查收邮件并进行验证。</p>
<h5 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h5><p>注册完成后，点击Start a project来新建一个版本库。</p>
<p>如果你已经注册，则在自己的主页，点击”New repository”，输入Repository name:yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了)</p>
<img src="/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/blog1.png" class>

<h5 id="启用GitHub-Page"><a href="#启用GitHub-Page" class="headerlink" title="启用GitHub Page"></a>启用GitHub Page</h5><p>进入版本库后，点击右上方的setting，下来到Githubs pages栏目</p>
<img src="/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/blog2.png" class>

<img src="/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/blog3.png" class title="image-20211212135139894">



<p>这里看到博客的访问地址，指定博客源文件的分支，设置自己的个人域名</p>
<h4 id="下载并安装Git"><a href="#下载并安装Git" class="headerlink" title="下载并安装Git"></a>下载并安装Git</h4><p>根据自己电脑操作系统的位数到git官网下载相应的版本：</p>
<p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<p>安装与配置过程可参考图文教程：<a href="http://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html">git的安装和配置</a></p>
<p>SSH-KEY的生成与配置可参考图文教程<a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html">window下配置SSH连接GitHub、GitHub配置ssh key：</a></p>
<h4 id="下载并安装node-js"><a href="#下载并安装node-js" class="headerlink" title="下载并安装node.js"></a>下载并安装node.js</h4><p>根据自己电脑操作系统的位数到git官网下载相应的版本：</p>
<p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<h5 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h5><p>命令提示符窗口，输入如下命令：</p>
<img src="/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/blog4.png" class>

<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\blog</code>目录下。</p>
<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>
<p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p>
<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>
<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>
<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：</p>
<img src="/2017/03/20/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/blog5.png" class>

<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>
<p>修改最后一行的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/zengnanbing/zengnanbing.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>repository修改为你自己的github项目地址。</p>
<h5 id="安装hexo-deployer-git插件"><a href="#安装hexo-deployer-git插件" class="headerlink" title="安装hexo-deployer-git插件"></a>安装hexo-deployer-git插件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h5 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h5><p>依次执行以下三条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean  #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">$ hexo generate  #生成静态页面至public目录</span><br><span class="line">$ hexo deploy  #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>

<p>执行hexo deploy命令之后，如果最后一行打印出如下信息则表示部署成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>

<p>然后你再去访问你创建的Github pages地址，也就是：你的Github用名.github.io，即可看到你本地的hexo项目已经被部署到github上去了。此时博客的默认主题是landscape，即上面本地测试时的样子。</p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>主要讲解Hexo的站点配置、主题配置和使用以及博客文章的发布。</p>
<p>在Hexo中有两份主要的配置文件，其名称都是_config.yml。其中，一份位于站点根目录下，主要包含Hexo本身的配置,我们称之为<strong>全局配置文件</strong>；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项,我们称之为<strong>主题配置文件</strong>。</p>
<p>hexo的官方网站：<a href="https://hexo.io/%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89hexo%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%EF%BC%8C%E4%B8%8D%E8%BF%87%E6%98%AF%E8%8B%B1%E6%96%87%E7%9A%84%E3%80%82%E6%B2%A1%E5%85%B3%E7%B3%BB%EF%BC%8C%E8%8B%B1%E8%AF%AD%E4%B8%8D%E5%A5%BD%E7%9A%84%E8%AF%B7%E5%BE%80%E4%B8%8B%E7%9C%8B%E3%80%82">https://hexo.io/，里面有hexo的详细说明文档，不过是英文的。没关系，英语不好的请往下看。</a></p>
<p><strong>注意：配置文件中每个字段后面的冒号是英文格式的，且在其后要加一个空格再写值</strong></p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Myblog</span><br></pre></td></tr></table></figure>

<h4 id="hexo的站点配置"><a href="#hexo的站点配置" class="headerlink" title="hexo的站点配置"></a>hexo的站点配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site 站点信息配置，根据自己的需要进行修改</span><br><span class="line">title: Zeng&#x27;s Blog    #站点名，会在浏览器页面标签左上角显示</span><br><span class="line">subtitle: Love Coding,Enjoy Life  #副标题</span><br><span class="line">description: zeng  #对站点的描述，给搜索引擎看的，可以自定义</span><br><span class="line">author: zeng  #网站作者</span><br><span class="line">language: zh-Hans  #网站语言</span><br><span class="line">timezone: Asia/Shanghai  #时区</span><br><span class="line">avatar: /images/logo.jpg  #网站logo，会在浏览器页面标签左上角显示</span><br><span class="line"></span><br><span class="line"># URL 博客地址,与申请的GitHub一致</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://fzy-line.github.io/</span><br><span class="line">root: /</span><br><span class="line">#博客链接格式</span><br><span class="line">permalink: :year/:month/:day/:title/ </span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory  #目录设置，一般不修改</span><br><span class="line">source_dir: source  #资源文件夹，放在里面的文件会上传到github中</span><br><span class="line">public_dir: public  #公共文件夹，存放生成的静态文件</span><br><span class="line">tag_dir: tags  #标签文件夹，默认是tags。实际存放在source/tags中。</span><br><span class="line">archive_dir: archives  #档案文件夹，默认是archives。</span><br><span class="line">category_dir: categories  #分类文件夹，默认是categories。实际存放在source/categories中。</span><br><span class="line">code_dir: downloads/code  #代码文件夹，默认是downloads/code</span><br><span class="line">i18n_dir: :lang  #国际化文件夹，默认跟language相同</span><br><span class="line">skip_render:  #跳过指定文件的渲染，您可使用 glob 来配置路径。</span><br><span class="line"></span><br><span class="line"># Writing  这是文章布局、写作格式的定义，一般不修改</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag  #分类和标签，一般不修改</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format  #日期、时间格式，一般不修改</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD </span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination  #可根据自己需要修改</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 6  #分页，每页文章数量</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions  #扩展</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next  #博客主题</span><br><span class="line">  </span><br><span class="line"># Deployment 这里配置站点部署到Github，上一节中已经讲过</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:你的Github用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="hexo使用主题"><a href="#hexo使用主题" class="headerlink" title="hexo使用主题"></a>hexo使用主题</h4><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p>
<p>hexo官方主题下载地址：<a href="https://hexo.io/themes/%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E5%A4%9A%E7%A7%8D%E5%A4%9A%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E4%BE%9B%E5%A4%A7%E5%AE%B6%E9%80%89%E6%8B%A9%E3%80%82">https://hexo.io/themes/，里面有多种多样的主题模板供大家选择。</a></p>
<p>这里使用的是ayer，下面的配置也是以这个主题为例。如果你使用的是其他的主题，那么请你自己根据说明文档进行配置。</p>
<p><a href="https://shen-yu.gitee.io/2019/ayer">ayer安装使用说</a></p>
<h4 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h4><h5 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new post BlogName</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>新建博客《BlogName》</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new post BlogName</span><br></pre></td></tr></table></figure>

<p>到站点目录下的/source/_posts/目录下可以看到生成了名为：我的第一篇博客.md的文件，这是Markdown格式的文件，可以用typra编辑器打开。</p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>如果你没有使用过Markdown编辑器，那请你自己去学习一下Markdown语法。</p>
<p>Markdown 语法说明(简体中文版)：<a href="http://zengnb.fun/2017/03/21/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%85%A5%E9%97%A8MarkDown/">认识与入门MarkDown</a></p>
<h5 id="编辑博客"><a href="#编辑博客" class="headerlink" title="编辑博客"></a>编辑博客</h5><p>Hexo默认新建的文章抬头已有title、date、tags等属性，可能缺乏categories和meta标签，想要指定目录就需要添加categories属性，而meta标签则是为了便于搜索引擎的收录。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2016-12-02 23:44:20</span><br><span class="line">tags: #文章标签 可以省略</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>tags字段是文章的标签，可以指定标签也可以不指定，如果要指定多个标签需要这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags: </span><br><span class="line"> - Linux</span><br><span class="line"> - Http</span><br></pre></td></tr></table></figure>

<p>我们可以添加上categories字段，对博客进行分类管理，然后点击主页左侧菜单的分类就可看到具体的分类。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories: Linux</span><br></pre></td></tr></table></figure>

<h5 id="发布博客-1"><a href="#发布博客-1" class="headerlink" title="发布博客"></a>发布博客</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean  #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">$ hexo generate  #生成静态页面至public目录</span><br></pre></td></tr></table></figure>

<p>写好之后可以现在本地预览，确定无误之后再部署到Github上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server  #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">$ hexo deploy  #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>

<p>需要说明的是：</p>
<p>我们博客文章的编写都是Markdown文件，但是发布到github上的其实是html文件，将Markdown转换成html这个工作我们只要输入hexo generate命令即可，hexo会帮我们完成转换。</p>
<h5 id="hexo命令简写形式"><a href="#hexo命令简写形式" class="headerlink" title="hexo命令简写形式"></a>hexo命令简写形式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2017/11/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li><p>git clone [url]//克隆一份代码到本地仓库</p>
</li>
<li><p>git pull //把远程库的代码更新到工作台</p>
</li>
<li><p>git status //查看当前分支有哪些修改</p>
</li>
<li><p>git diff //查看当前没有add的内容</p>
</li>
<li><p>git add . //把本地的修改加到stage中</p>
</li>
<li><p>git commit -m ‘comments here’ //把stage中的修改提交到本地库</p>
</li>
<li><p>git reset –head commit_id // 撤回提交</p>
</li>
<li><p>git push //把本地库的修改提交到远程库中</p>
</li>
<li><p>git push origin localbranch:remotebranch // 将本地代码提交到远程的<strong>指定</strong>分支</p>
</li>
<li><p>git log //查看当前分支上面的日志信息</p>
</li>
<li><p>git log -p [file] //文件的修改记录</p>
</li>
<li><p>git log –stat –grep=”…” //查找提交记录</p>
</li>
<li><p>git diff –cache //查看已经add但是没有commit的内容</p>
</li>
<li><p>git branch -r/-a //查看远程分支/全部分支</p>
</li>
<li><p>git checkout master/branch //切换到某个分支</p>
</li>
<li><p>git checkout -b test //新建test分支</p>
</li>
<li><p>git checkout -d test //删除test分支</p>
</li>
<li><p>git checkout -b localbranch remotebranch //<strong>基于远程分支</strong>创建本地分支</p>
</li>
<li><p>git merge master //假设当前在test分支上面，把master分支上的修改同步到test分支上</p>
</li>
<li><p>git branch –set-upstream-to=origin/Release_v1.6.4_20170831 // 将本地分支<strong>关联</strong>到远程分支上</p>
</li>
<li><p>git branch –set-upstream-to=origin/Release_v1.6.4_20170831 localBranchName//<code> **切换**本地分支**关联**的远程分支</code> </p>
</li>
<li><p>git branch -vv // 查看本地分支关联的远程分支之间的<strong>对应关系</strong></p>
</li>
<li><p>git merge dev  //<strong>合并</strong>指定分支到当前分支(将dev分支合并到当前分支)</p>
</li>
<li><p>git reset –hard HEAD //撤销本地修改</p>
</li>
<li><p>git tag //列出所有标签</p>
</li>
<li><p>git tag -a [tag name] “comment” //新建tag</p>
</li>
<li><p>git push –tags</p>
</li>
<li><p>git cherry-pick [commit id] //合入某条提交</p>
</li>
<li><p>git cherry-pick commitid1..commitid100 //合入这个区间的提交，注意不包括commitd1,即(commitid1..commitid100]</p>
</li>
<li><p>git format-patch -s [commit id] // 某次提交以后的所有patch</p>
</li>
<li><p>git am field_patches/* –ignore-whitespace //合入补丁</p>
</li>
<li><p>git reset HEAD readme.txt // 把<strong>暂存区</strong>的修改撤<strong>销掉</strong>（<code>unstage</code>），重新放回工作区</p>
</li>
<li><p>git checkout – readme.txt<code> 让这个文件回到最近一次</code>git commit<code>或</code>git add<code>时的状态,没有</code>–` ，就变成了切换分支的命令</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具/git</category>
      </categories>
  </entry>
  <entry>
    <title>git理解</title>
    <url>/2021/12/12/git%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  <code>git</code>有四个工作区域，分别是：工作目录（<code>Workspace</code>）、暂存区（<code>Index/Stage</code>）、本地仓库（<code>Repository</code>）、远程仓库（<code>Remote</code>）</p>
<h3 id="Git文件状态变化周期"><a href="#Git文件状态变化周期" class="headerlink" title="Git文件状态变化周期"></a>Git文件状态变化周期</h3><p>工作目录下每个文件都只有两种状态：<strong>已跟踪</strong>和<strong>未跟踪</strong>。</p>
<p>已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于<strong>未修改</strong>，<strong>已修改</strong>或已放入<strong>暂存区</strong>。</p>
<p>工作目录中除<strong>已跟踪文件</strong>以外的所有其它文件都属于<strong>未跟踪文件</strong>，既不存在于上次快照的记录中，也没有放入暂存区。初次克隆某个仓库的时，工作目录中所有文件都属于<strong>已跟踪文件</strong>，并处于<strong>未修改状态</strong>。</p>
<p>编辑处于未修改状态的文件后，Git将它们标记为<strong>已修改文件</strong>。将这些修改过的文件放入暂存区，然后<strong>提交所有暂存了的修改</strong>，如此反复。<img src="/2021/12/12/git%E7%90%86%E8%A7%A3/%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png" class title="文件状态变化周期"></p>
<h2 id="分支管理理解"><a href="#分支管理理解" class="headerlink" title="分支管理理解"></a>分支管理理解</h2><p>项目开发过程中，通常多个需求会同时开发，以及发布情况复杂很多时候需求上不了，需要回退代码且版本管理混乱，分支管理显得尤为重要。</p>
<p>一般的项目中都有主分支<code>master</code>、开发分支<code>develop</code>、上线分支<code>Release</code>。通常我们是在<code>develop</code>分支上进行开发，当要上线时会从<code>develop</code>分支上拉取上线分支<code>Release</code>，当上线完成后将<code>Release</code>分支合并到<code>master</code>和<code>develop</code>分支上。</p>
<p>每一个需求都拉一个新的分支，且根据需求的复杂程度以及周期长短决定从哪一个分支上进行新分支的拉取，建议所有需求都从<code>master</code>分支上拉取新分支。以及是否有必要新建立一个对应的远程分支。建议分支名称最好是以<strong>自己的名字/需求编号</strong>的形式进行命名。</p>
<p>当开发一个简单且周期短的的需求时，可以直接从<code>master</code>分支上拉取新分支，也可以从<code>develop</code>分支上拉取，可以不必建立对应的远程分支。当开发完成时直接merge到develop分支上。</p>
<p>当开发一个比较复杂的需求时，从<code>master</code>或<code>develop</code>分支上拉取新<strong>分支1</strong>，开发过程中提交到对应的<strong>远程分支1</strong>上。当开发完成需要联调或者上线时，从联调或者上线分支上拉一个新<strong>分支2</strong>，在<strong>分支2</strong>上拉取<strong>远程分支1</strong>进行<code>merge</code>。</p>
]]></content>
      <categories>
        <category>工具/git</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>认识与入门MarkDown</title>
    <url>/2021/12/12/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%85%A5%E9%97%A8MarkDown/</url>
    <content><![CDATA[<!doctype html>
<p><a href="http://zh.wikipedia.org/wiki/Markdown">Markdown</a> 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
<h4 id="Markdown-官方文档"><a href="#Markdown-官方文档" class="headerlink" title="Markdown 官方文档"></a>Markdown 官方文档</h4><p>这里可以看到官方的 Markdown 语法规则文档，当然，后文我也会用自己的方式，阐述这些语法在实际使用中的用法。</p>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax">创始人John Gruber的Markdown语法说明</a></li>
<li><a href="http://wowubuntu.com/markdown/#list">Markdown中文版语法说明</a></li>
</ul>
<h4 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h4><ul>
<li>专注你的文字内容而不是排版样式。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>可读，直观。适合所有人的写作语言。</li>
</ul>
<h4 id="用什么工具？"><a href="#用什么工具？" class="headerlink" title="用什么工具？"></a>用什么工具？</h4><p>推荐<a href="https://www.typora.io/">Typora</a></p>
<h4 id="Markdown语法的简要规则"><a href="#Markdown语法的简要规则" class="headerlink" title="Markdown语法的简要规则"></a>Markdown语法的简要规则</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>标题是每篇文章都需要也是最常用的格式，在Markdown中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><a href="https://guojingyinan.github.io/2017/03/21/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%85%A5%E9%97%A8MarkDown/1541749053869.png"><img src="https://guojingyinan.github.io/2017/03/21/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%85%A5%E9%97%A8MarkDown/1541749053869.png" alt="img"></a></p>
<p>以此类推，总共六级标题，建议在 <code>#</code> 号后加上一个空格，这是最标准的Markdown语法。</p>
<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个或以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>熟悉HTML的同学肯定知道有序列表与无序列表的区别，在Markdown下，列表只需要在文字前加上<code>-</code>、<code>+</code>或<code>*</code> 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3.符号要和文字之间加上一个字符的空格。</p>
<p>例1，有序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一点</span><br><span class="line">2. 第二点</span><br><span class="line">4. 第三点</span><br></pre></td></tr></table></figure>

<ol>
<li>第一点</li>
<li>第二点</li>
<li>第三点</li>
</ol>
<p>例2，无序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 这是无序列表项目</span><br><span class="line">+ 这是无序列表项目</span><br><span class="line">* 这是无序列表项目</span><br></pre></td></tr></table></figure>

<ul>
<li>这是无序列表项目</li>
<li>这是无序列表项目</li>
<li>这是无序列表项目</li>
</ul>
<p>两个列表之间不能相邻，否则会解释为嵌套的列表。下面这个是嵌套的列表，例3，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ 呵呵</span><br><span class="line">    * 嘉嘉</span><br><span class="line">    - 嘻嘻</span><br><span class="line">    - 吼吼</span><br><span class="line">        - 嘎嘎</span><br><span class="line">        + 桀桀</span><br><span class="line">* 哈哈</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<ul>
<li>呵呵<ul>
<li>嘉嘉</li>
<li>嘻嘻</li>
<li>吼吼<ul>
<li>嘎嘎</li>
<li>桀桀</li>
</ul>
</li>
</ul>
</li>
<li>哈哈</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li>标记后面最少有一个<code>空格</code>或<code>制表符</code>。</li>
<li>若不在引用区块中，必须和前方段落之间存在空行，后面最好还是空一行，否则会解释为嵌套的列表。</li>
<li>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。</li>
<li>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例3所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。</li>
</ol>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入<code>&gt;</code>这种尖括号(大于号)即可。<br>例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 这是引用</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>这是引用</p>
</blockquote>
<p>特别的，引用还可以嵌套，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 这是一级引用</span><br><span class="line">&gt;&gt; 这是二级引用</span><br><span class="line">&gt;&gt;&gt; 这是三级引用</span><br><span class="line"></span><br><span class="line">&gt; 这是一级引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一级引用</p>
<blockquote>
<p>这是二级引用</p>
<blockquote>
<p>这是三级引用</p>
</blockquote>
</blockquote>
<p>这是一级引用</p>
</blockquote>
<h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p>使用三个**`**表示代码块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var canvas = document.getElementById(&quot;canvas&quot;);</span><br><span class="line">var context = canvas.getContext(&quot;2d&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>**`**这个符号是反引号，我一开始在键盘上死命的找还找不到呢？闹笑话了，这个符号在Esc键下面，切换到英文下即可。</p>
<h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。</p>
<ul>
<li>使用<code>[](link &quot;Optional title&quot;)</code>表示行内链接。其中<code>[]</code>内的内容为要添加链接的文字，<code>link</code>为链接地址，<code>Optional title</code> 为显示标题。显示效果为在你将鼠标放到链接上后，会显示一个小框提示，提示的内容就是<code>Optional title</code>里的内容。</li>
</ul>
<p>例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这就是行内链接：[Zeng&#x27;s Blog](http://www.jianshu.com &quot;Zeng&#x27;s Blog&quot;)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>这就是行内链接：<a href="https://guojingyinan.github.io/">Zeng’s Blog</a></p>
<ul>
<li>参考式链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里我们参考：</span><br><span class="line">1. [JavaScript | MDN][1]</span><br><span class="line">2. [ECMAScript 6 入门 阮一峰][2]</span><br><span class="line">3. [InfoQ JavaScript][3]</span><br><span class="line">[1]: http://developer.mozilla.org/zh-CN/docs/Web/JavaScript</span><br><span class="line">[2]: http://es6.ruanyifeng.com</span><br><span class="line">[3]: http://www.infoq.com/cn/javascript/?utm_source=infoq&amp;utm_medium=header_graybar&amp;utm_campaign=topic_clk</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>这里我们参考：</p>
<ol>
<li><a href="http://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></li>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门 阮一峰</a></li>
<li><a href="http://www.infoq.com/cn/javascript/?utm_source=infoq&utm_medium=header_graybar&utm_campaign=topic_clk">InfoQ JavaScript</a></li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>上述的<code>[1]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</code>不出现在区块中。</li>
<li>参考式链接和行内链接的显示效果是一样的。但是在编辑状态下的使用情况不一样。行内连接紧跟链接文字，可以在看到链接文字的同时清楚的知道链接地址，但是不便于多次重复利用。参考式链接可以重复使用，但一般都是将一些链接放在一起统一管理，如一段文字后面或文章结尾，因此在找到链接和链接文字的对应关系上有些麻烦。各有利弊了，分情况使用。</li>
</ol>
<h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><p>插入图片与插入链接的语法很像，区别在一个<code>!</code>号，插入图片语法为：<code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></p>
<p><code>Alt text</code>为如果图片无法显示时显示的文字。</p>
<p><code>/path/to/img.jpg</code>为图片所在路径。</p>
<p><code>Optional title</code>为显示标题。显示效果为在你将鼠标放到图片上后，会显示一个小框提示，提示的内容就是<code>Optional title</code>。</p>
<p>例，行内式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图灵社区](http://www.turingbook.com/Content/img/Turing.Gif)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><a href="http://www.turingbook.com/Content/img/Turing.Gif"><img src="http://www.turingbook.com/Content/img/Turing.Gif" alt="图灵社区"></a></p>
<h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h5><p>使用<code>**</code>或<code>__</code>表示粗体。<br>使用<code>*</code>或<code>_</code>表示斜体。<br>例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**粗体1**   __粗体2__</span><br><span class="line">*斜体1*   _斜体2_</span><br></pre></td></tr></table></figure>

<p>效果：<br><strong>粗体1</strong> <em>粗体2</em> <em>斜体1</em> <em>斜体2</em> <strong>注意：</strong>前后的<code>*</code>或<code>_</code>与要<strong>加粗</strong>或<em>倾斜</em>的字体之间不能有空格。</p>
<h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>表格应该是Markdown比较累人的地方，语法真是操蛋！<br>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。<br>详细说明：</p>
<ul>
<li><code>----:</code>为右对齐</li>
<li><code>:----</code>为左对齐</li>
<li><code>:---:</code>为居中对齐</li>
<li><code>-----</code>为默认左对齐</li>
</ul>
<p><strong>注意：</strong><code>-</code>这样的分隔符至少要有1个！目前测试是这样的！</p>
<p>例1，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 序号 | 交易名 | 交易说明 | 备注 |</span><br><span class="line">| ---: | :----: | :------- | ---- |</span><br><span class="line">|   1  | prfcfg | 菜单配置 | 可以通过此交易查询到所有交易码和菜单的对应关系 |</span><br><span class="line">|   2  | gentmo | 编译所有交易 |  |</span><br><span class="line">|   100000  | sysdba | 数据库表模型汇总 |  |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">交易名</th>
<th align="left">交易说明</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">prfcfg</td>
<td align="left">菜单配置</td>
<td align="left">可以通过此交易查询到所有交易码和菜单的对应关系</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">gentmo</td>
<td align="left">编译所有交易</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">100000</td>
<td align="left">sysdba</td>
<td align="left">数据库表模型汇总</td>
<td align="left"></td>
</tr>
</tbody></table>
<h5 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h5><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。<br>例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<hr>
<hr>
<hr>
<p><strong>注意：</strong></p>
<ol>
<li>只要<code>*</code>或者<code>-</code>大于等于三个就可组成一条平行线。</li>
<li>使用<code>---</code>作为水平分割线时，要在它的前后都空一行，防止<code>---</code>被当成标题标记的表示方式。</li>
</ol>
<h5 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h5><p>使用``表示反斜杠，相当于<strong>反转义</strong>作用。在你不想显示Markdown标记时可以使用反斜杠。<br>Markdown支持的转义字符列表：</p>
<p>\ 反斜线<br>` 反引号</p>
<ul>
<li>星号<br>_ 底线<br>{} 花括号<br>[] 方括号<br>() 括弧</li>
</ul>
<h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>使用<code>~~</code>表示删除线。<br>例，</p>
<p><code>~~这是一条删除线~~</code><br>效果：<br><del>这是一条删除线</del><br><strong>注意：</strong><code>~~</code>和要添加删除线的文字之间不能有空格。</p>
<h5 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h5><p>使用<code>[^footer1]</code>表示注脚。<br>例，</p>
<p>这是一个注脚测试<code>[^footer1]</code></p>
<p>效果：<br>这是一个注脚测试[^footer1]</p>
<hr>
<p>我的参考如下：</p>
<p><a href="http://www.jianshu.com/p/250e36bb5690#">Markdown的基本语法</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
</search>
